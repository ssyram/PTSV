
let pA = 1/3
let pB = 1/3
let pEnd = 1 - pA - pB

%BEGIN rPTSA config
restriction := 2
q0 := q1
m0 := mEmpty
gamma0 := root
%END rPTSA config
    
%BEGIN rPTSA rules(q1, mEmpty, root, pEnd, \top)
(q1, mEmpty, root, pA, (q1, mA_end_1, up g))
(q1, mEmpty, root, pB, (q1, mB_end_1, up g))
(q1, mEmpty, g, pA, (q1, mA_end_1, up g))
(q1, mEmpty, g, pB, (q1, mB_end_1, up g))
(q1, mEmpty, g, pEnd, (q_end_1, endStr, down))
(q_end_1, mA_end_1, g, 1, (q_end_1, mA_2, down))
(q_end_1, mB_end_1, g, 1, (q_end_1, mB_2, down))
(q_end_1, mA_end_1, root, 1, (q2, mA_end_2, up g))
(q_end_1, mB_end_1, root, 1, (q2, mB_end_2, up g))
(q2, endStr, g, 1, (q_end_2, endStr, down))
(q2, mA_2, g, 1, (q2, mA_end_2, up g))
(q2, mB_2, g, 1, (q2, mB_end_2, up g))
(q_end_2, mA_end_2, g, 1, (q_end_2, mA_3, down))
(q_end_2, mB_end_2, g, 1, (q_end_2, mB_3, down))
(q_end_2, mA_end_2, root, 1, \top)
(q_end_2, mB_end_2, root, 1, \top)
%END rPTSA rules
